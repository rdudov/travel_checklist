import logging
from datetime import datetime
from typing import Dict, Any
import re
import os
import statistics

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

# Import states from constants.py
from constants import WAITING_DESTINATION, WAITING_START_DATE, WAITING_DURATION, WAITING_TRIP_TYPE, WAITING_NEW_ITEM_NAME

from models.checklist import User, Checklist, ChecklistItem
from services.weather import WeatherService
from services.checklist_generator import ChecklistGenerator
from sqlalchemy.orm import Session

logger = logging.getLogger(__name__)

class ChecklistHandlers:
    def __init__(self, session: Session, llm_client=None):
        """Initialize handlers with database session."""
        self.session = session
        self.checklist_generator = ChecklistGenerator()
        self.weather_service = WeatherService()
        self.llm_client = llm_client or self.checklist_generator.llm_client

    async def handle_destination(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle destination input for new trip checklist."""
        user = update.effective_user
        destination = update.message.text
        
        logger.info("User interaction", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "action": "destination_input",
            "destination": destination
        })
        
        # Clear any previous data to avoid state conflicts
        context.user_data.clear()
        context.user_data['destination'] = destination

        # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏
        message = (
            f"üåç –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ {destination}.\n\n"
            "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.06.2025"
        )
        await update.message.reply_text(message)
        return WAITING_START_DATE

    async def handle_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle trip start date input."""
        user = update.effective_user
        date_text = update.message.text
        
        try:
            # Validate date format (DD.MM.YYYY)
            if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_text):
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.06.2025)"
                )
                return WAITING_START_DATE
                
            # Parse date
            try:
                start_date = datetime.strptime(date_text, "%d.%m.%Y")
                
                # Check if date is in the future
                if start_date < datetime.now():
                    await update.message.reply_text(
                        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
                    )
                    return WAITING_START_DATE
                    
            except ValueError:
                await update.message.reply_text(
                    "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return WAITING_START_DATE
            
            logger.info("User interaction", extra={
                "user_interaction": True,
                "user_id": user.id,
                "username": user.username,
                "action": "start_date_input",
                "start_date": date_text
            })
            
            # Save start date to context
            context.user_data['start_date'] = date_text
            context.user_data['start_date_obj'] = start_date
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            message = "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ–µ–∑–¥–∫–∞? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
            await update.message.reply_text(message)
            return WAITING_DURATION
            
        except Exception as e:
            logger.error("Error processing start date", extra={
                "user_interaction": True,
                "user_id": user.id,
                "error": str(e)
            })
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return WAITING_START_DATE

    async def handle_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle trip duration input."""
        user = update.effective_user
        
        logger.info("User interaction", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "action": "duration_input",
            "input": update.message.text
        })
        
        try:
            # Parse duration as integer
            duration = int(update.message.text.strip())
            
            if duration <= 0:
                raise ValueError("Duration must be positive")
                
            context.user_data['duration'] = duration
            
            # Get weather info for this destination
            try:
                # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É
                await update.message.reply_text(
                    f"üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {context.user_data['destination']}...\n"
                    f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
                weather_info = await self.weather_service.get_weather_forecast(
                    context.user_data['destination']
                )
                
                # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–≥–æ–¥—É –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['weather_info'] = weather_info
                
                # –°–æ–∑–¥–∞–¥–∏–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
                weather_description = []
                temp_min = []
                temp_max = []
                wind_speeds = []
                precipitation_amounts = []
                
                for day_forecast in weather_info.get('daily', []):
                    # –î–æ–±–∞–≤–∏–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
                    if 'description' in day_forecast:
                        weather_description.append(day_forecast['description'])
                    
                    # –°–æ–±–µ—Ä—ë–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    if 'temp_min' in day_forecast:
                        temp_min.append(day_forecast['temp_min'])
                    if 'temp_max' in day_forecast:
                        temp_max.append(day_forecast['temp_max'])
                    
                    # –°–æ–±–µ—Ä—ë–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
                    if 'wind_speed' in day_forecast:
                        wind_speeds.append(day_forecast['wind_speed'])
                    
                    # –°–æ–±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å–∞–¥–∫–∞—Ö
                    if 'precipitation' in day_forecast:
                        precipitation_amounts.append(day_forecast['precipitation'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                weather_message = f"üìä –ü–æ–≥–æ–¥–∞ –≤ {context.user_data['destination']} –Ω–∞ {min(duration, len(weather_info.get('daily', [])))} –¥–Ω–µ–π:\n\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, –¥–æ–±–∞–≤–∏–º –µ–≥–æ
                if weather_info.get('daily', []):
                    weather_message += f"‚Ä¢ –ü–æ–≥–æ–¥–∞: {', '.join(set(weather_description[:3]))}...\n"
                    
                    if temp_min and temp_max:
                        avg_min = sum(temp_min) / len(temp_min)
                        avg_max = sum(temp_max) / len(temp_max)
                        weather_message += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {avg_min:.1f}¬∞C –¥–æ {avg_max:.1f}¬∞C\n"
                    
                    if wind_speeds:
                        max_wind = max(wind_speeds)
                        weather_message += f"‚Ä¢ –í–µ—Ç–µ—Ä: –¥–æ {max_wind} –º/—Å\n"
                    
                    if precipitation_amounts:
                        total_precip = sum(precipitation_amounts)
                        weather_message += f"‚Ä¢ –û—Å–∞–¥–∫–∏: {total_precip:.1f} –º–º"
                else:
                    weather_message += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."
                
                # –°–æ—Ö—Ä–∞–Ω–∏–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
                context.user_data['aggregated_weather'] = {
                    'descriptions': list(set(weather_description)),
                    'avg_temp_min': sum(temp_min)/len(temp_min) if temp_min else None,
                    'avg_temp_max': sum(temp_max)/len(temp_max) if temp_max else None,
                    'max_wind': max(wind_speeds) if wind_speeds else None,
                    'avg_precip': round(total_precip/len(precipitation_amounts), 1) if precipitation_amounts else None,
                    'total_precip': round(total_precip, 1) if precipitation_amounts else None
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
                await update.message.reply_text(weather_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–∏ –ø–æ–µ–∑–¥–∫–∏
                await update.message.reply_text(
                    "–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏? –û–ø–∏—à–∏—Ç–µ –µ—ë —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–∞ –ø–ª—è–∂–µ, –ø–æ—Å–µ—Ç–∏—Ç—å –¥–µ–ª–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, "
                    "–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø–æ—Ö–æ–¥ –≤ –≥–æ—Ä—ã –∏ —Ç.–¥."
                )
                return WAITING_TRIP_TYPE
                
            except Exception as e:
                logger.error("Error getting weather info", extra={
                    "user_interaction": True,
                    "user_id": user.id,
                    "destination": context.user_data['destination'],
                    "error": str(e)
                })
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º.\n\n"
                    "–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏? –û–ø–∏—à–∏—Ç–µ –µ—ë —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–∞ –ø–ª—è–∂–µ, –ø–æ—Å–µ—Ç–∏—Ç—å –¥–µ–ª–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, "
                    "–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø–æ—Ö–æ–¥ –≤ –≥–æ—Ä—ã –∏ —Ç.–¥."
                )
                return WAITING_TRIP_TYPE
            
        except ValueError:
            logger.warning("Invalid duration input", extra={
                "user_interaction": True,
                "user_id": user.id,
                "input": update.message.text
            })
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–±–æ–ª—å—à–µ 0)."
            )
            return WAITING_DURATION
        except Exception as e:
            logger.error("Error processing duration", extra={
                "user_interaction": True,
                "user_id": user.id,
                "error": str(e)
            })
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            context.user_data.clear()
            return ConversationHandler.END

    async def handle_trip_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle trip type input."""
        user = update.effective_user
        
        # Now handling text input instead of callback query
        user_input = update.message.text.strip()
        
        logger.info("User interaction", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "action": "trip_type_input",
            "user_input": user_input
        })
        
        # Store the original user input
        context.user_data['original_trip_purpose'] = user_input
        
        # Send message about processing
        progress_message = await update.message.reply_text(
            "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö –ø–æ–µ–∑–¥–∫–∏...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        # Get all base trip purposes from database
        from models.checklist import TripPurpose
        
        # Get all base trip purposes
        base_purposes = []
        try:
            base_purposes = self.session.query(TripPurpose).all()
            logger.info(f"Found {len(base_purposes)} base trip purposes in database")
            
            # If no base purposes in database, initialize them
            if not base_purposes:
                logger.info("No base trip purposes found in database, initializing them")
                from init_base_trip_purposes import init_trip_purposes
                init_trip_purposes()
                base_purposes = self.session.query(TripPurpose).all()
                logger.info(f"Initialized {len(base_purposes)} base trip purposes")
            
            # Convert to dict format for LLM
            base_purposes_for_llm = [
                {"name": p.name, "description": p.description} 
                for p in base_purposes
            ]
            
            # Classify the user input using LLM
            classification_result = await self.llm_client.classify_trip_purpose(
                user_input, 
                base_purposes_for_llm
            )
            
            # Handle new category if needed
            if classification_result.get("is_new_category", False) and classification_result.get("new_category_name"):
                new_name = classification_result["new_category_name"]
                new_description = classification_result["new_category_description"] or new_name
                
                # Check if this category already exists (just in case)
                existing = self.session.query(TripPurpose).filter_by(name=new_name).first()
                if not existing:
                    # Add the new category to the database
                    new_purpose = TripPurpose(
                        name=new_name,
                        description=new_description,
                        is_base=False  # Not a base category
                    )
                    self.session.add(new_purpose)
                    self.session.commit()
                    logger.info(f"Added new trip purpose category: {new_name} - {new_description}")
                    
                # Use the new category
                trip_type = new_name
            else:
                # Use the matched category
                trip_type = classification_result.get("matched_category", "other")
            
            # Store the classified trip type
            context.user_data['trip_type'] = trip_type
            
            # Generate checklist based on collected information
            logger.info("Generating checklist", extra={
                "user_interaction": True,
                "user_id": user.id,
                "destination": context.user_data['destination'],
                "trip_type": context.user_data['trip_type'],
                "original_purpose": context.user_data['original_trip_purpose'],
                "duration": context.user_data['duration'],
                "start_date": context.user_data['start_date']
            })
            
            # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            await progress_message.edit_text(
                "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏...\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            from models.checklist import User
            user_db = self.session.query(User).filter_by(
                telegram_id=update.effective_user.id
            ).first()
            
            if not user_db:
                user_db = User(
                    telegram_id=update.effective_user.id,
                    username=update.effective_user.username,
                    first_name=update.effective_user.first_name,
                    last_name=update.effective_user.last_name
                )
                self.session.add(user_db)
                self.session.commit()
            
            # Generate checklist with LLM
            checklist = await self.checklist_generator.generate_travel_checklist(
                destination=context.user_data['destination'],
                purpose=context.user_data['original_trip_purpose'],  # Pass original purpose
                category=context.user_data['trip_type'],  # Pass classified category
                duration=context.user_data['duration'],
                start_date=context.user_data['start_date'],
                weather_info=context.user_data.get('weather_info', {}),
                user_id=user_db.id  # Pass user ID for fetching previous lists
            )
            
            # Create a better title with date, time, purpose and duration
            creation_time = datetime.now().strftime("%H:%M")
            trip_purpose = context.user_data['original_trip_purpose']  # Show original purpose in title
            trip_title = f"{context.user_data['destination']} —Å {context.user_data['start_date']} ({trip_purpose} {context.user_data['duration']} –¥–Ω–µ–π)"
            
            from models.checklist import Checklist, ChecklistItem
            db_checklist = Checklist(
                title=trip_title,
                type='travel',
                trip_metadata={
                    'destination': context.user_data['destination'],
                    'trip_type': context.user_data['trip_type'],  # Classified type
                    'original_purpose': context.user_data['original_trip_purpose'],  # Original input
                    'duration': context.user_data['duration'],
                    'start_date': context.user_data['start_date'],
                    'weather': context.user_data.get('weather_info', {}),
                    'aggregated_weather': context.user_data.get('aggregated_weather', {})
                },
                owner_id=user_db.id
            )
            self.session.add(db_checklist)
            self.session.commit()
            
            logger.info("Checklist saved", extra={
                "user_interaction": True,
                "user_id": user_db.id,
                "checklist_id": db_checklist.id,
                "generation_method": checklist.get("generated_by", "unknown")
            })
            
            # Convert categories from the generator to our item format
            items = []
            for category, category_items in checklist['categories'].items():
                for item in category_items:
                    items.append({
                        'title': item,
                        'category': category
                    })
            
            # Add all items to the database
            for item in items:
                checklist_item = ChecklistItem(
                    title=item['title'],
                    description=item.get('description'),
                    category=item.get('category'),
                    checklist_id=db_checklist.id,
                    order=item.get('order', 0)
                )
                self.session.add(checklist_item)
            self.session.commit()
            
            # –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π URL
            checklist_id = db_checklist.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL —á–µ—Ä–µ–∑ ngrok
            public_url = os.environ.get('PUBLIC_WEB_URL')
            
            if public_url:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                web_url = f"{public_url}/checklist/{checklist_id}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
                web_button = [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=web_url)]
                
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
                web_message = f"üåê –í–µ–±-–≤–µ—Ä—Å–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {web_url}"
            else:
                # –ï—Å–ª–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É
                web_button = []  # –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ URL
                
                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É
                web_message = (
                    f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏: http://localhost:8000/checklist/{checklist_id}"
                )
            
            # Create result message
            result_text = (
                f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ {context.user_data['destination']}.\n\n"
                f"üìã –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(checklist['categories'])}\n\n"
                f"{web_message}"
            )
            
            # Send message with inline keyboard for web view and voice
            keyboard = []
            if web_button:
                keyboard.append(web_button)
            
            keyboard.append([InlineKeyboardButton("üìù –ú–æ–∏ —Å–ø–∏—Å–∫–∏", callback_data="my_lists")])
            keyboard.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="new_trip")])
            keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(result_text, reply_markup=reply_markup)
            
            # Clear user data
            context.user_data.clear()
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error("Error processing trip type input", extra={
                "user_interaction": True,
                "user_id": user.id,
                "error": str(e),
                "traceback": traceback.format_exc()
            })
            
            # In case of error, use a default category
            context.user_data['trip_type'] = "other"
            context.user_data['original_trip_purpose'] = user_input
            
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–∏ –ø–æ–µ–∑–¥–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–î—Ä—É–≥–æ–µ'.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞..."
            )
            
            # For brevity, let's send a generic error message and restart the conversation
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            context.user_data.clear()
            return ConversationHandler.END

    async def show_user_lists(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show all checklists for the user."""
        user = update.effective_user
        query = update.callback_query
        
        try:
            # Get user's checklists from database
            user_obj = self.session.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                user_obj = User(telegram_id=user.id, username=user.username)
                self.session.add(user_obj)
                self.session.commit()
            
            checklists = self.session.query(Checklist).filter(Checklist.owner_id == user_obj.id).all()
            
            if not checklists:
                message = (
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newtrip"
                )
                keyboard = [[InlineKeyboardButton("üåç –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="new_trip")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if query:
                    await query.edit_message_text(text=message, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(message, reply_markup=reply_markup)
                return
            
            message = "üìã –í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:\n\n"
            keyboard = []
            
            for checklist in checklists:
                # Get destination from trip_metadata
                destination = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"
                if checklist.trip_metadata and 'destination' in checklist.trip_metadata:
                    destination = checklist.trip_metadata['destination']
                
                # Format date if available
                date_str = ""
                if checklist.trip_metadata and 'start_date' in checklist.trip_metadata:
                    try:
                        start_date = datetime.strptime(checklist.trip_metadata['start_date'], "%d.%m.%Y")
                        date_str = f" ({start_date.strftime('%d.%m.%Y')})"
                    except (ValueError, TypeError):
                        pass
                
                # Add checklist to message and keyboard
                message += f"‚Ä¢ {destination}{date_str}\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üëÅ {destination}{date_str}",
                        callback_data=f"view_{checklist.id}"
                    )
                ])
            
            # Add navigation buttons
            keyboard.append([InlineKeyboardButton("üåç –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="new_trip")])
            keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if query:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message, reply_markup=reply_markup)
                
        except Exception as e:
            logger.error(f"Error showing user lists: {str(e)}", exc_info=True)
            error_message = (
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            if query:
                await query.edit_message_text(text=error_message)
            else:
                await update.message.reply_text(error_message)

    async def view_checklist(self, update: Update, context: ContextTypes.DEFAULT_TYPE, checklist_id: int) -> None:
        """View a specific checklist."""
        user = update.effective_user
        query = update.callback_query
        
        # Get checklist from database
        checklist = self.session.query(Checklist).filter(Checklist.id == checklist_id).first()
        
        if not checklist:
            message = "‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫–∞–º", callback_data="my_lists")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if query:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message, reply_markup=reply_markup)
            return
        
        # Get destination from trip_metadata
        destination = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"
        if checklist.trip_metadata and 'destination' in checklist.trip_metadata:
            destination = checklist.trip_metadata['destination']
        
        # Format checklist information
        message = f"üåç –°–ø–∏—Å–æ–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ {destination}\n\n"
        
        # Get start date from trip_metadata
        if checklist.trip_metadata and 'start_date' in checklist.trip_metadata:
            message += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {checklist.trip_metadata['start_date']}\n"
        
        # Get duration from trip_metadata
        if checklist.trip_metadata and 'duration' in checklist.trip_metadata:
            message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {checklist.trip_metadata['duration']} –¥–Ω–µ–π\n"
        
        # Get trip type from trip_metadata
        if checklist.trip_metadata and 'trip_type' in checklist.trip_metadata:
            message += f"üéØ –¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏: {checklist.trip_metadata['trip_type']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if checklist.trip_metadata and 'aggregated_weather' in checklist.trip_metadata:
            weather = checklist.trip_metadata['aggregated_weather']
            message += "üå¶ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:**\n"
            
            if weather.get('day_temp_range'):
                message += f"üå° –î–Ω–µ–º: –æ—Ç {weather['day_temp_range'][0]}¬∞C –¥–æ {weather['day_temp_range'][1]}¬∞C\n"
                
            if weather.get('night_temp_range'):
                message += f"üåô –ù–æ—á—å—é: –æ—Ç {weather['night_temp_range'][0]}¬∞C –¥–æ {weather['night_temp_range'][1]}¬∞C\n"
                
            if weather.get('descriptions'):
                message += f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {', '.join(weather['descriptions'])}\n"
                
            if weather.get('avg_wind'):
                message += f"üí® –í–µ—Ç–µ—Ä: –≤ —Å—Ä–µ–¥–Ω–µ–º {weather['avg_wind']} –º/—Å"
                if weather.get('max_wind'):
                    message += f", –º–∞–∫—Å–∏–º—É–º –¥–æ {weather['max_wind']} –º/—Å"
                message += "\n"
                
            if weather.get('avg_precip'):
                message += f"üåß –û—Å–∞–¥–∫–∏: –≤ —Å—Ä–µ–¥–Ω–µ–º {weather['avg_precip']} –º–º/–¥–µ–Ω—å"
                if weather.get('total_precip'):
                    message += f", –≤—Å–µ–≥–æ –¥–æ {weather['total_precip']} –º–º –∑–∞ –ø–µ—Ä–∏–æ–¥"
                message += "\n"
        
        message += "\nüìã –°–ø–∏—Å–æ–∫ –≤–µ—â–µ–π:\n\n"
        
        # Group items by category
        items_by_category = {}
        for item in checklist.items:
            category = item.category or "–ü—Ä–æ—á–µ–µ"
            if category not in items_by_category:
                items_by_category[category] = []
            items_by_category[category].append(item)
        
        # Add items to message
        for category, items in items_by_category.items():
            message += f"üìÅ {category}:\n"
            for item in items:
                status = "‚úÖ" if item.is_completed else "‚Ä¢"
                message += f"{status} {item.title}\n"
            message += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL —á–µ—Ä–µ–∑ ngrok
        public_url = os.environ.get('PUBLIC_WEB_URL')
        
        if public_url:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            web_url = f"{public_url}/checklist/{checklist_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
            web_button = [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=web_url)]
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            web_message = f"üåê –í–µ–±-–≤–µ—Ä—Å–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {web_url}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            message += f"{web_message}\n"
        else:
            # –ï—Å–ª–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É
            web_button = []  # –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ URL
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É
            web_message = (
                f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏: http://localhost:8000/checklist/{checklist_id}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            message += f"{web_message}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{checklist_id}")],
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{checklist_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫–∞–º", callback_data="my_lists")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(text=message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
    
    async def edit_checklist(self, update: Update, context: ContextTypes.DEFAULT_TYPE, checklist_id: int) -> None:
        """Edit a specific checklist."""
        query = update.callback_query
        user = update.effective_user
        
        logger.info("User editing checklist", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "checklist_id": checklist_id
        })
        
        # Get the checklist
        checklist = self.session.query(Checklist).filter_by(id=checklist_id).first()
        
        if not checklist:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º
        user_db = self.session.query(User).filter_by(telegram_id=user.id).first()
        if not user_db or checklist.owner_id != user_db.id:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        items_by_category = {}
        for item in checklist.items:
            category = item.category or "–ü—Ä–æ—á–µ–µ"
            if category not in items_by_category:
                items_by_category[category] = []
            items_by_category[category].append(item)
        
        message = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞: {checklist.title}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –û–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç", callback_data=f"add_item_{checklist_id}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        public_url = os.environ.get('PUBLIC_WEB_URL')
        if public_url:
            web_url = f"{public_url}/edit/{checklist_id}"
            keyboard.append([InlineKeyboardButton("üåê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=web_url)])
            message += f"\n\nüåê –î–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {web_url}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, items in items_by_category.items():
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            keyboard.append([InlineKeyboardButton(f"üìÇ {category} ({len(items)})", callback_data=f"category_{checklist_id}_{category}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"view_{checklist_id}")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup)
    
    async def handle_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle category selection for item editing."""
        query = update.callback_query
        user = update.effective_user
        
        # Extract checklist_id and category from callback data
        _, checklist_id, category = query.data.split('_', 2)
        checklist_id = int(checklist_id)
        
        logger.info("User viewing category items", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "checklist_id": checklist_id,
            "category": category
        })
        
        await query.answer()
        
        # Get the checklist and items in this category
        checklist = self.session.query(Checklist).filter_by(id=checklist_id).first()
        
        if not checklist:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º
        user_db = self.session.query(User).filter_by(telegram_id=user.id).first()
        if not user_db or checklist.owner_id != user_db.id:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.")
            return
        
        # Get items in this category
        items = self.session.query(ChecklistItem).filter_by(
            checklist_id=checklist_id,
            category=category
        ).all()
        
        message = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        keyboard = []
        
        # Add button for each item (for deletion)
        for item in items:
            keyboard.append([InlineKeyboardButton(
                f"‚ùå {item.title}", 
                callback_data=f"delete_item_{item.id}"
            )])
        
        # Add back button
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_{checklist_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup)
    
    async def handle_add_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle add item request."""
        query = update.callback_query
        user = update.effective_user
        
        # Extract checklist_id from callback data
        _, checklist_id = query.data.split('_', 1)
        checklist_id = int(checklist_id)
        
        logger.info("User adding item to checklist", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "checklist_id": checklist_id
        })
        
        await query.answer()
        
        # Get the checklist
        checklist = self.session.query(Checklist).filter_by(id=checklist_id).first()
        
        if not checklist:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º
        user_db = self.session.query(User).filter_by(telegram_id=user.id).first()
        if not user_db or checklist.owner_id != user_db.id:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.")
            return
        
        # Get categories
        categories = set()
        for item in checklist.items:
            categories.add(item.category or "–ü—Ä–æ—á–µ–µ")
        
        # Sort categories
        categories = sorted(list(categories))
        if "–ü—Ä–æ—á–µ–µ" in categories:
            # Move "–ü—Ä–æ—á–µ–µ" to the end
            categories.remove("–ü—Ä–æ—á–µ–µ")
            categories.append("–ü—Ä–æ—á–µ–µ")
        
        # Store in context
        context.user_data['add_item_to_checklist'] = checklist_id
        
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:"
        
        keyboard = []
        
        # Add button for each category
        for category in categories:
            keyboard.append([InlineKeyboardButton(
                f"üìÇ {category}", 
                callback_data=f"add_to_category_{checklist_id}_{category}"
            )])
        
        # Add button for new category
        keyboard.append([InlineKeyboardButton(
            "üÜï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", 
            callback_data=f"new_category_{checklist_id}"
        )])
        
        # Add back button
        keyboard.append([InlineKeyboardButton(
            "üîô –û—Ç–º–µ–Ω–∞", 
            callback_data=f"edit_{checklist_id}"
        )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup)
    
    async def handle_add_to_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle adding item to a specific category."""
        query = update.callback_query
        user = update.effective_user
        
        # Extract checklist_id and category from callback data
        _, checklist_id, category = query.data.split('_', 2)
        checklist_id = int(checklist_id)
        
        logger.info("User adding item to category", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "checklist_id": checklist_id,
            "category": category
        })
        
        await query.answer()
        
        # Store in context
        context.user_data['add_item_to_checklist'] = checklist_id
        context.user_data['add_item_category'] = category
        
        message = f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':"
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_{checklist_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup)
        
        # Set state for conversation handler
        return WAITING_NEW_ITEM_NAME
    
    async def handle_new_item_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle new item name input."""
        user = update.effective_user
        item_name = update.message.text.strip()
        
        # Get checklist_id and category from context
        checklist_id = context.user_data.get('add_item_to_checklist')
        category = context.user_data.get('add_item_category')
        
        if not checklist_id or not category:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        logger.info("User entered new item name", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "checklist_id": checklist_id,
            "category": category,
            "item_name": item_name
        })
        
        # Get the checklist
        checklist = self.session.query(Checklist).filter_by(id=checklist_id).first()
        
        if not checklist:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º
        user_db = self.session.query(User).filter_by(telegram_id=user.id).first()
        if not user_db or checklist.owner_id != user_db.id:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.")
            return ConversationHandler.END
        
        # Add new item
        max_order = self.session.query(ChecklistItem).filter_by(
            checklist_id=checklist_id,
            category=category
        ).count()
        
        new_item = ChecklistItem(
            title=item_name,
            category=category,
            checklist_id=checklist_id,
            order=max_order + 1
        )
        self.session.add(new_item)
        self.session.commit()
        
        logger.info("New item added", extra={
            "user_interaction": True,
            "user_id": user.id,
            "checklist_id": checklist_id,
            "item_id": new_item.id,
            "category": category
        })
        
        # Clear context
        context.user_data.pop('add_item_to_checklist', None)
        context.user_data.pop('add_item_category', None)
        
        message = f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!"
        
        # Add buttons
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"add_item_{checklist_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"view_{checklist_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        return ConversationHandler.END
    
    async def handle_delete_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle deletion of an item."""
        query = update.callback_query
        user = update.effective_user
        
        # Extract item_id from callback data
        _, item_id = query.data.split('_', 1)
        item_id = int(item_id)
        
        logger.info("User deleting item", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "item_id": item_id
        })
        
        await query.answer()
        
        # Get the item and its checklist
        item = self.session.query(ChecklistItem).filter_by(id=item_id).first()
        
        if not item:
            await query.message.reply_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        checklist_id = item.checklist_id
        checklist = self.session.query(Checklist).filter_by(id=checklist_id).first()
        
        # Verify ownership
        user_db = self.session.query(User).filter_by(telegram_id=user.id).first()
        if not user_db or checklist.owner_id != user_db.id:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É.")
            return
        
        # Get item details for the message
        item_title = item.title
        category = item.category
        
        # Delete the item
        self.session.delete(item)
        self.session.commit()
        
        logger.info("Item deleted", extra={
            "user_interaction": True,
            "user_id": user.id,
            "checklist_id": checklist_id,
            "item_id": item_id,
            "category": category
        })
        
        message = f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{item_title}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!"
        
        # Add buttons
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"category_{checklist_id}_{category}")],
            [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"edit_{checklist_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup)

    async def share_checklist(self, update: Update, context: ContextTypes.DEFAULT_TYPE, checklist_id: int) -> None:
        """Share a checklist with others."""
        query = update.callback_query
        user = update.effective_user
        
        logger.info("User sharing checklist", extra={
            "user_interaction": True,
            "user_id": user.id,
            "username": user.username,
            "checklist_id": checklist_id
        })
        
        # Get the checklist
        checklist = self.session.query(Checklist).filter_by(id=checklist_id).first()
        
        if not checklist:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        # Placeholder for share functionality
        message = (
            "üîÑ –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"view_{checklist_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup) 