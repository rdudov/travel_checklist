import logging
import os
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from dotenv import load_dotenv
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

from models.base import Base
from handlers import ChecklistHandlers

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Database setup
engine = create_engine(os.getenv('DATABASE_URL'))
Session = sessionmaker(bind=engine)
Base.metadata.create_all(engine)

# States for conversation
WAITING_DESTINATION, WAITING_TRIP_TYPE, WAITING_DURATION = range(3)

# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user = update.effective_user
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n\n"
        "üåç –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newtrip\n"
        "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mylists\n"
        "üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newlist\n"
        "‚ùì –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )
    
    keyboard = [
        [InlineKeyboardButton("üåç –ù–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", callback_data="new_trip")],
        [InlineKeyboardButton("üìã –ú–æ–∏ —Å–ø–∏—Å–∫–∏", callback_data="my_lists")],
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç", callback_data="new_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§ñ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/newtrip - –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n"
        "/mylists - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏\n"
        "/newlist - –°–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π —á–µ–∫-–ª–∏—Å—Ç\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –≤–µ—â–µ–π —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥—ã\n"
        "- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤\n"
        "- –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö\n"
        "- –û–±–º–µ–Ω —Å–ø–∏—Å–∫–∞–º–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º"
    )
    await update.message.reply_text(help_text)

async def new_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start new trip checklist creation."""
    message = (
        "üåç –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!\n\n"
        "–ö—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É:"
    )
    await update.message.reply_text(message)
    return WAITING_DESTINATION

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button presses."""
    query = update.callback_query
    await query.answer()

    handlers = ChecklistHandlers(Session())

    if query.data == "new_trip":
        await new_trip(update, context)
    elif query.data == "my_lists":
        await handlers.show_user_lists(update, context)
    elif query.data == "new_list":
        await start_new_list(query, context)
    elif query.data.startswith("trip_"):
        await handlers.handle_trip_type(update, context)
    elif query.data == "main_menu":
        await start(update, context)

async def start_new_list(query: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start creation of a new general checklist."""
    message = (
        "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π:"
    )
    keyboard = [
        [InlineKeyboardButton("üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data="shopping_list")],
        [InlineKeyboardButton("üîß –†–µ–º–æ–Ω—Ç", callback_data="repair_list")],
        [InlineKeyboardButton("‚ú® –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

def main():
    """Start the bot."""
    # Create the Application and pass it your bot's token
    application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()

    # Create handlers instance
    handlers = ChecklistHandlers(Session())

    # Add conversation handler for new trip creation
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("newtrip", new_trip)],
        states={
            WAITING_DESTINATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_destination)
            ],
            WAITING_TRIP_TYPE: [
                CallbackQueryHandler(handlers.handle_trip_type, pattern="^trip_")
            ],
            WAITING_DURATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_duration)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel the conversation."""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    return ConversationHandler.END

if __name__ == '__main__':
    main() 